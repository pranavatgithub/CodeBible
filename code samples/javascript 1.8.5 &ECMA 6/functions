function f() {};
const f = 5;    //function name= constant name =errror

// THIS WILL CAUSE AN ERROR ALSO
function f() {
  const g = 5;   //const g modified to var g in fun() --> errror
  var g;

  //statements
}


another method
-------------------

var square = function(number) { return number * number }; //fn without name
var x = square(4) // x gets the value 16

var factorial = function fac(n) { return n < 2 ? 1 : n * fac(n-1) }; //with name
console.log(factorial(3));

condition based fn
-----------------------------

var myFunc;
if (num === 0){
  myFunc = function(theObject) {
    theObject.make = "Toyota"
  }else{
myFunc = function(theObject) {
    theObject.make = "Honda"
  }

}
}

------------------------------------

Inner functin call
---------------------

function outside(x) {
  function inside(y) {
    return x + y;
  }
  return inside;
}

result1 = outside(3)(5); // returns 8 wow!!


nestedfunction
---------------------

function A(x) {
  function B(y) {
    function C(z) {
      console.log(x + y + z);
    }
    C(3);
  }
  B(2);
}
A(1); // logs 6 (1 + 2 + 3)  C access B's and A's values

Getting the args[]
--------------------------------------

function myConcat(separator) {
   var result = ""; // initialize list
   var i;
   // iterate through arguments
   for (i = 0; i < arguments.length; i++) {  //arguments[] are in a array like form .we can pass any number of args[]
      console.log(arguments[i]);
   }
}

myConcat("red", "orange", "blue");  //result red,orange,blue


put default parameters method-1
-------------------------------------

function multiply(a, b) {
  b = typeof b !== 'undefined' ?  b : 1;

  return a*b;
}

multiply(5); // 5

method-2
-----------

function multiply(a, b = 1) {
  return a*b;
}

multiply(5); // 5

