//arrow fn

var foo = a => {
    console.log(a);
};
foo(2); // 2

// arrow fn is not just a new syntax of fn , it is totally different in terms of scopings

//1. A small problem

var obj = {
    id: "awesome",
    cool: function coolFn() {
        console.log(this.id);
    }
};
var id = "not awesome";
obj.cool(); // awesome
setTimeout(obj.cool, 100); // not awesome WTF?? becoz this in coolFn now refers to global scope the place where it being 
//called

//FIX?? ya here we go
var obj = {
    count: 0,
    cool: function coolFn() {
        var self = this; // now self won't change at all
        if (self.count < 1) {
            setTimeout(function timer() {
                self.count++;
                console.log("awesome?");
            }, 100);
        }
    }
};
obj.cool(); // awesome works!

//one more fix

var obj = {
    count: 0,
    cool: function coolFn() {
        if (this.count < 1) {
            setTimeout(function timer() {
                this.count++; // `this` is safe because of `bind(..)`
                console.log("more awesome");
            }.bind(this), 100); // look, `bind()`!
        }
    }
};
obj.cool(); // more awesome


// note: we can't name an arrow function sad :(